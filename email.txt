<!DOCTYPE html>
<html>
<head>
  <title>Recent Emails</title>
</head>
<body>
  <div id="recent-emails">
    <h2>Recent Emails</h2>
    <ul id="email-list"></ul>
  </div>

  <script src="https://apis.google.com/js/api.js"></script>
  <script>
    // Client ID and API key from the Developer Console
    const CLIENT_ID = '545829323534-qrsb1aqkl8m21359a5r524i5nn7n3qij.apps.googleusercontent.com';
    const API_KEY = 'AIzaSyBolQWCD3_c8WjS2NWQYgieUwlTmZnaocM';
    //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

    // Array to store email subject lines
    const emailSubjectLines = [];

    // Load the API client and authenticate the user
    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function initClient() {
      gapi.client.init({
        apiKey: API_KEY,
        clientId: CLIENT_ID,
        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],
        scope: 'https://www.googleapis.com/auth/cloud-platform.read-only'
      }).then(() => {
        // Authenticate the user
        return gapi.auth2.getAuthInstance().signIn();
      }).then(() => {
        // Call the function to retrieve recent emails
        getEmails();
      }).catch(err => {
        console.error(err);
        // console.error('Error initializing Gmail API:', err);
      });
    }

    // Retrieve recent emails
    function getEmails() {
      gapi.client.gmail.users.messages.list({
        userId: 'me',
        maxResults: 5, // Adjust the number of emails to retrieve
        labelIds: 'INBOX'
      }).then(response => {
        const messages = response.result.messages;
        if (messages && messages.length > 0) {
          messages.forEach(message => {
            gapi.client.gmail.users.messages.get({
              userId: 'me',
              id: message.id,
              format: 'metadata',
              metadataHeaders: ['Subject']
            }).then(messageResponse => {
              const subject = messageResponse.result.payload.headers.find(header => header.name === 'Subject');
              if (subject) {
                emailSubjectLines.push(subject.value);
              }

              // Check if all emails have been retrieved
              if (emailSubjectLines.length === messages.length) {
                displayEmailSubjectLines();
              }
            });
          });
        }
      }).catch(err => {
        console.error('Error retrieving emails:', err);
      });
    }

    // Display email subject lines
    function displayEmailSubjectLines() {
      const emailList = document.getElementById('email-list');

      emailSubjectLines.forEach(subjectLine => {
        const listItem = document.createElement('li');
        listItem.textContent = subjectLine;
        emailList.appendChild(listItem);
      });
    }

    // Load the Gmail API client
    handleClientLoad();
  </script>
</body>
</html>
